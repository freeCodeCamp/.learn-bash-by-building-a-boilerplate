"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
const path_1 = require("path");
const fs_1 = require("fs");
const util_1 = require("util");
const parse_1 = require("./utils/parse");
const args_1 = require("./utils/args");
const commits_1 = require("./utils/commits");
const skeleton_1 = __importDefault(require("./schema/skeleton"));
const tutorial_1 = __importDefault(require("./schema/tutorial"));
const validateSchema_1 = require("./utils/validateSchema");
const validateMarkdown_1 = require("./utils/validateMarkdown");
const write = util_1.promisify(fs_1.writeFile);
const read = util_1.promisify(fs_1.readFile);
async function build(args) {
    let options;
    try {
        const dir = !args.length || args[0].match(/^-/) ? '.' : args[0];
        const markdown = args_1.getArg(args, { name: 'markdown', alias: 'm' }) || 'TUTORIAL.md';
        const yaml = args_1.getArg(args, { name: 'yaml', alias: 'y' }) || 'coderoad.yaml';
        const output = args_1.getArg(args, { name: 'output', alias: 'o' }) || 'tutorial.json';
        const validate = args_1.getArg(args, { name: 'validate', alias: 'v' }) !== 'false';
        console.log(`Building CodeRoad ${output}...`);
        options = {
            dir,
            output,
            markdown,
            yaml,
            validate
        };
    }
    catch (e) {
        console.error('Error parsing build logs');
        console.error(e.message);
        return;
    }
    const localPath = path_1.join(process.cwd(), options.dir);
    let _markdown;
    let _yaml;
    try {
        ;
        [_markdown, _yaml] = await Promise.all([
            read(path_1.join(localPath, options.markdown), 'utf8'),
            read(path_1.join(localPath, options.yaml), 'utf8')
        ]);
    }
    catch (e) {
        console.error('Error reading file:');
        console.error(e.message);
        return;
    }
    try {
        const isValid = validateMarkdown_1.validateMarkdown(_markdown);
        if (!isValid) {
            console.warn('Invalid markdown');
        }
    }
    catch (e) {
        console.error('Error validating markdown:');
        console.error(e.message);
        return;
    }
    let skeleton;
    try {
        skeleton = js_yaml_1.load(_yaml);
        if (!skeleton || !Object.keys(skeleton).length) {
            throw new Error(`Skeleton at "${options.yaml}" is invalid`);
        }
    }
    catch (e) {
        console.error('Error parsing yaml');
        console.error(e.message);
        return;
    }
    try {
        const valid = validateSchema_1.validateSchema(skeleton_1.default, skeleton);
        if (!valid) {
            console.error('Skeleton validation failed. See above to see what to fix');
            return;
        }
    }
    catch (e) {
        console.error('Error validating tutorial schema:');
        console.error(e.message);
    }
    let commits;
    try {
        commits = await commits_1.getCommits({
            localDir: localPath,
            codeBranch: skeleton.config.repo.branch
        });
    }
    catch (e) {
        console.error('Error loading commits:');
        console.error(e.message);
        return;
    }
    let tutorial;
    try {
        tutorial = await parse_1.parse({
            text: _markdown,
            skeleton,
            commits
        });
    }
    catch (e) {
        console.error('Error parsing tutorial:');
        console.error(e.message);
        return;
    }
    try {
        if (options.validate) {
            const valid = validateSchema_1.validateSchema(tutorial_1.default, tutorial);
            if (!valid) {
                console.error('Tutorial validation failed. See above to see what to fix');
            }
        }
    }
    catch (e) {
        console.error('Error validating tutorial schema:');
        console.error(e.message);
    }
    if (tutorial) {
        try {
            await write(options.output, JSON.stringify(tutorial, null, 2), 'utf8');
            console.info(`Success! See output at ${options.output}`);
        }
        catch (e) {
            console.error('Error writing tutorial json file:');
            console.error(e.message);
        }
    }
}
exports.default = build;
//# sourceMappingURL=build.js.map