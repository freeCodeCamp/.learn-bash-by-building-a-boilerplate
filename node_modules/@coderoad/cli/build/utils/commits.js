"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommits = exports.parseCommits = void 0;
const fs_1 = require("fs");
const util_1 = __importDefault(require("util"));
const path = __importStar(require("path"));
const promise_1 = __importDefault(require("simple-git/promise"));
const validateCommits_1 = require("./validateCommits");
const mkdirPromise = util_1.default.promisify(fs_1.mkdir);
const existsPromise = util_1.default.promisify(fs_1.exists);
const rmdirPromise = util_1.default.promisify(fs_1.rmdir);
function parseCommits(logs) {
    const commits = {};
    const positions = [];
    for (const commit of logs.all) {
        const matches = commit.message.match(/^(?<init>INIT)|(L?(?<levelId>\d+)[S|\.]?(?<stepId>\d+)?(?<stepType>[Q|A|T|S])?)/);
        if (matches && matches.length) {
            const { groups } = matches;
            let position;
            if (groups.init) {
                position = 'INIT';
            }
            else if (groups.levelId && groups.stepId) {
                let stepType;
                if (!groups.stepType || ['Q', 'T'].includes(groups.stepType)) {
                    stepType = 'T';
                }
                else if (!groups.stepType || ['A', 'S'].includes(groups.stepType)) {
                    stepType = 'S';
                }
                position = `${groups.levelId}.${groups.stepId}:${stepType}`;
            }
            else if (groups.levelId) {
                position = groups.levelId;
            }
            else {
                console.warn(`No matcher for commit "${commit.message}"`);
            }
            commits[position] = [...(commits[position] || []), commit.hash];
            positions.unshift(position);
        }
        else {
            const initMatches = commit.message.match(/^INIT/);
            if (initMatches && initMatches.length) {
                commits.INIT = [commit.hash, ...(commits.INIT || [])];
                positions.unshift('INIT');
            }
        }
    }
    validateCommits_1.validateCommitOrder(positions);
    return commits;
}
exports.parseCommits = parseCommits;
async function getCommits({ localDir, codeBranch }) {
    const git = promise_1.default(localDir);
    const isRepo = await git.checkIsRepo();
    if (!isRepo) {
        throw new Error('No git repo provided');
    }
    const tmpDir = path.join(localDir, '.tmp');
    const tmpDirExists = await existsPromise(tmpDir);
    if (tmpDirExists) {
        await rmdirPromise(tmpDir, { recursive: true });
    }
    await mkdirPromise(tmpDir);
    const tempGit = promise_1.default(tmpDir);
    await tempGit.clone(localDir, tmpDir);
    const branches = await git.branch();
    if (!branches.all.length) {
        throw new Error('No branches found');
    }
    else if (!branches.all.includes(codeBranch)) {
        throw new Error(`Code branch "${codeBranch}" not found`);
    }
    const originalBranch = branches.current;
    try {
        await git.checkout(codeBranch);
        const logs = await git.log();
        const commits = parseCommits(logs);
        return commits;
    }
    catch (e) {
        console.error('Error with checkout or commit matching');
        throw new Error(e.message);
    }
    finally {
        await git.checkout(originalBranch);
        await rmdirPromise(tmpDir, { recursive: true });
    }
}
exports.getCommits = getCommits;
//# sourceMappingURL=commits.js.map