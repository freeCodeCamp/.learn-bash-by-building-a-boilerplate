"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestRunner = exports.createCommandRunner = exports.createCherryPick = exports.createExec = void 0;
const child_process_1 = require("child_process");
const path_1 = require("path");
const util_1 = require("util");
const asyncExec = util_1.promisify(child_process_1.exec);
function createExec(cwd) {
    return async function exec(command) {
        try {
            const result = await asyncExec(command, { cwd });
            return result;
        }
        catch (e) {
            return { stdout: null, stderr: e.message };
        }
    };
}
exports.createExec = createExec;
function createCherryPick(cwd) {
    return async function cherryPick(commits) {
        for (const commit of commits) {
            try {
                const { stdout, stderr } = await createExec(cwd)(`git cherry-pick -X theirs ${commit}`);
                if (stderr) {
                    console.warn(stderr);
                }
                if (!stdout) {
                    console.warn(`No cherry-pick output for ${commit}`);
                }
            }
            catch (e) {
                console.warn(`Cherry-pick failed for ${commit}`);
                console.error(e.message);
            }
        }
    };
}
exports.createCherryPick = createCherryPick;
function createCommandRunner(cwd) {
    return async function runCommands(commands, dir) {
        let errors = [];
        for (const command of commands) {
            try {
                console.log(`--> ${command}`);
                let cwdDir = cwd;
                if (dir) {
                    cwdDir = path_1.join(cwd, dir);
                }
                const { stdout, stderr } = await createExec(cwdDir)(command);
                console.log(stdout);
                console.warn(stderr);
            }
            catch (e) {
                console.error(`Command failed: "${command}"`);
                console.warn(e.message);
                errors.push(e.message);
            }
        }
        return !!errors.length;
    };
}
exports.createCommandRunner = createCommandRunner;
function createTestRunner(cwd, config) {
    const { command, args, directory } = config;
    let wd = cwd;
    if (directory) {
        wd = path_1.join(cwd, directory);
    }
    const commandWithArgs = `${command} ${args.tap}`;
    return async function runTest() {
        try {
            return await createExec(wd)(commandWithArgs);
        }
        catch (e) {
            return Promise.resolve({ stdout: null, stderr: e.message });
        }
    };
}
exports.createTestRunner = createTestRunner;
//# sourceMappingURL=exec.js.map