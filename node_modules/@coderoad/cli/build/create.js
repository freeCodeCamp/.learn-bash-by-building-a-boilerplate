"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ncp_1 = __importDefault(require("ncp"));
const path = __importStar(require("path"));
const util_1 = require("util");
const args_1 = require("./utils/args");
const copy = util_1.promisify(ncp_1.default);
async function create(args) {
    let options;
    const dir = !args.length || args[0].match(/^-/) ? '.' : args[0];
    const lang = args_1.getArg(args, { name: 'lang', alias: 'l' }) || 'js';
    const testRunner = args_1.getArg(args, { name: 'testRunner', alias: 't' }) || 'mocha';
    if (!['js'].includes(lang)) {
        throw new Error(`Language ${lang} not supported yet in create`);
    }
    if (!['mocha'].includes(testRunner)) {
        throw new Error(`Test Runner ${testRunner} not supported yet in create`);
    }
    console.info(`Creating CodeRoad project for ${lang} ${testRunner}`);
    options = {
        dir,
        lang,
        testRunner
    };
    const localPath = path.join(process.cwd(), options.dir);
    const pathToSrc = path.join(__dirname, '..', 'src');
    const templateDirectory = path.resolve(pathToSrc, 'templates');
    const markdownPath = path.join(templateDirectory, 'TUTORIAL.md');
    const targetMarkdownPath = path.join(localPath, 'TUTORIAL.md');
    try {
        await copy(markdownPath, targetMarkdownPath, {
            clobber: false
        });
    }
    catch (e) {
        console.error('Error on creating markdown file');
        console.error(e.message);
    }
    const pathToYaml = path.join(templateDirectory, `${lang}-${testRunner}`);
    try {
        await copy(pathToYaml, localPath, {
            clobber: false
        });
    }
    catch (e) {
        console.error('Error on creating yaml file');
        console.error(e.message);
    }
}
exports.default = create;
//# sourceMappingURL=create.js.map